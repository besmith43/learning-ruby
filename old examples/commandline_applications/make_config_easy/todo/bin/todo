#!/usr/bin/env ruby
#
$LOAD_PATH << File.expand_path(File.dirname(__FILE__) + '/../lib')
require 'gli'
require 'todo/version'

include GLI::App

version Todo::VERSION
config_file File.join(ENV['HOME'],'.todo.rc.yaml')

switch "force-tty"

desc "Path to the todo file"
arg_name "todo_file"
default_value "#{ENV['HOME']}/.todo.txt"
flag [:f,:filename]

desc 'URL to JIRA'
arg_name 'url'
flag :url

desc 'Username for JIRA'
arg_name 'username'
flag :username

desc 'Password for JIRA'
arg_name 'password'
flag :password

desc 'Create a new task in the task list'
long_desc %(
A task has a name and a priority. By default, new
tasks have the lowest possible priority, though
this can be overridden.  If task_name is omitted,
read tasks from the standard input.
)
arg_name '[task_name...]'
command :new do |c|

  c.desc 'set the priority of the new task, 1 being the highest'
  c.arg_name 'priority'
  c.flag :p

  c.desc 'put the new task first in the list'
  c.switch :f

  c.desc 'group for JIRA'
  c.arg_name 'group_name'
  c.flag :group

  c.action do |global_options,options,task_names|
    File.open(global_options[:filename],'a+') do |todo_file|
      if task_names.empty?
        puts "Reading new tasks from stdin..."
        task_names = STDIN.readlines.map { |a| a.chomp }
      end
      tasks = 0
      task_names.each do |task| 
        todo_file.puts [task,Time.now].join(',')
        tasks += 1
      end
      if tasks == 0
        raise "You must provide tasks on the command-line or standard input" 
      end
    end
  end
end

desc 'List tasks'
command :list do |c|

  c.desc 'Format of the output (pretty for TTY, csv otherwise)'
  c.arg_name 'csv|pretty'
  # explicit default removed
  c.flag :format

  c.action do |global_options,options,args|
    if global_options[:'force-tty']
      def STDOUT.tty?
        true
      end
    end
    if options[:format].nil?
      if STDOUT.tty? 
        options[:format] = 'pretty'
      else
        options[:format] = 'csv'
      end
    end

    # ...
    
    File.open(global_options[:filename]) do |file|
      index = 1
      file.readlines.each do |todo|
        name,created,completed = todo.chomp.split(/,/)
        if options[:format] == 'pretty'
          # Use the pretty-print format
          printf("%2d - %s\n",index,name)
          printf("     %-10s %s\n","Created:",created)
          printf("     %-10s %s\n","Completed:",completed) if completed
        elsif options[:format] == 'csv'
          # Use the machine-readable CSV format
          complete_flag = completed ? "C" : "U"
          printf("%d,%s,%s,%s,%s\n",index,name,complete_flag,created,completed)
        end
        index += 1
      end
    end
  end
end

desc 'Complete a task'
command :done do |c|
  c.action do |global_options,options,args|
  end
end

exit run(ARGV)
