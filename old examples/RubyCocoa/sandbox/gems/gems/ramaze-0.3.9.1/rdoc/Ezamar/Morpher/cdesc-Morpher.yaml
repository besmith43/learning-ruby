--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: transform
- !ruby/object:RI::MethodSummary 
  name: transform
comment: 
- !ruby/struct:SM::Flow::P 
  body: This applies a morphing-replace for the template.
- !ruby/struct:SM::Flow::P 
  body: To use the functionality of Morpher you will need to have hpricot installed, you will get one error in case you don't and the method will be replaced by a stub that simply returns the template.
- !ruby/struct:SM::Flow::P 
  body: The method first checks if you use any morphers and just skips the step if you don't, this should give quite some speedup for smaller templates that don't use this functionality at all. the check works by searching the morphs with appended '=' in the template. There may be a few cases where this won't work since we cannot make any assumptions on the format.
- !ruby/struct:SM::Flow::P 
  body: "If you want to turn this functionality off, either remove Morpher from:"
- !ruby/struct:SM::Flow::VERB 
  body: "  Ramaze::Template::Ezamar::TRANSFORM_PIPELINE\n"
- !ruby/struct:SM::Flow::P 
  body: "or do:"
- !ruby/struct:SM::Flow::VERB 
  body: "  Ramaze::Morpher::MORPHS.clear\n"
- !ruby/struct:SM::Flow::P 
  body: The latter is a tad slower, but i mention the possibility in case you find good use for it.
- !ruby/struct:SM::Flow::P 
  body: You can add your own morphers in Ramaze::Morpher::MORPHS
- !ruby/struct:SM::Flow::P 
  body: "For Example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  Morpher::MORPHS['if'] = '&lt;?r %morph %expression ?&gt;%content&lt;?r end ?&gt;'\n"
- !ruby/struct:SM::Flow::P 
  body: Now, assuming that some tag in your template is '&lt;a if=&quot;@foo&quot;&gt;x&lt;/a&gt;'
- !ruby/struct:SM::Flow::P 
  body: "%morph stands for the name of your morph: 'if' %expression is the stuff you write in the attribute: '@foo' %content is the tag without the attribute (and all inside): '&lt;a&gt;x&lt;/a&gt;'"
constants: 
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Use this trait to define your custom morphs.
  name: MORPHS
  value: "{             'if'     => '<?r %morph %expression ?>%content<?r end ?>',             'unless' => '<?r %morph %expression ?>%content<?r end ?>',             'for'    => '<?r %morph %expression ?>%content<?r end ?>',             'each'   => '<?r %expression.%morph do |_e| ?>%content<?r end ?>',             'times'  => '<?r %expression.%morph do |_t| ?>%content<?r end ?>',   }"
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Use this trait to define your custom morphs.
  name: MORPHS
  value: "{             'if'     => '<?r %morph %expression ?>%content<?r end ?>',             'unless' => '<?r %morph %expression ?>%content<?r end ?>',             'for'    => '<?r %morph %expression ?>%content<?r end ?>',             'each'   => '<?r %expression.%morph do |_e| ?>%content<?r end ?>',             'times'  => '<?r %expression.%morph do |_t| ?>%content<?r end ?>',   }"
full_name: Ezamar::Morpher
includes: []

instance_methods: []

name: Morpher
superclass: Object
