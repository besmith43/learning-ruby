--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: action_cache holds rendered output of actions for which caching is enabled.
- !ruby/struct:SM::Flow::P 
  body: "For simple cases:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class Controller &lt; Ramaze::Controller\n    map '/path/to'\n    helper :cache\n    cache :action\n\n    def action with, params\n      'rendered output'\n    end\n  end\n\n  { '/path/to/action/with/params' =&gt; {\n      :time =&gt; Time.at(rendering),\n      :type =&gt; 'content/type',\n      :content =&gt; 'rendered output'\n    }\n  }\n"
- !ruby/struct:SM::Flow::P 
  body: "If an additional key is provided:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class Controller &lt; Ramaze::Controller\n    map '/path/to'\n    helper :cache\n    cache :action, :key =&gt; lambda{ 'value of key proc' }\n\n    def action\n      'output'\n    end\n  end\n\n  { '/path/to/action' =&gt; {\n      'value of key proc' =&gt; {\n        :time =&gt; Time.at(rendering),\n        :type =&gt; 'content/type',\n        :content =&gt; 'output'\n      }\n    }\n  }\n"
- !ruby/struct:SM::Flow::P 
  body: Caches can be invalidated after a certain amount of time by supplying a :ttl option (in seconds)
- !ruby/struct:SM::Flow::VERB 
  body: "  class Controller &lt; Ramaze::Controller\n    helper :cache\n    cache :index, :ttl =&gt; 60\n\n    def index\n      Time.now.to_s\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: or by deleting values from action_cache directly
- !ruby/struct:SM::Flow::VERB 
  body: "  action_cache.clear\n  action_cache.delete '/index'\n  action_cache.delete '/path/to/action'\n"
full_name: Ramaze::Helper::Cache#action_cache
is_singleton: false
name: action_cache
params: ()
visibility: private
