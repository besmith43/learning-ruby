--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: env_for
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: Rack::MockRequest helps testing your Rack application without actually using HTTP.
- !ruby/struct:SM::Flow::P 
  body: After performing a request on a URL with get/post/put/delete, it returns a MockResponse with useful helper methods for effective testing.
- !ruby/struct:SM::Flow::P 
  body: You can pass a hash with additional configuration to the get/post/put/delete.
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:input</tt>:"
    body: A String or IO-like to be used as rack.input.
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:fatal</tt>:"
    body: Raise a FatalWarning if the app writes to rack.errors.
  - !ruby/struct:SM::Flow::LI 
    label: "<tt>:lint</tt>:"
    body: If true, wrap the application in a Rack::Lint.
  type: :NOTE
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: DEFAULT_ENV
  value: "{       \"rack.version\" => [0,1],       \"rack.input\" => StringIO.new,       \"rack.errors\" => StringIO.new,       \"rack.multithread\" => true,       \"rack.multiprocess\" => true,       \"rack.run_once\" => false,     }"
full_name: Rack::MockRequest
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: delete
- !ruby/object:RI::MethodSummary 
  name: get
- !ruby/object:RI::MethodSummary 
  name: post
- !ruby/object:RI::MethodSummary 
  name: put
- !ruby/object:RI::MethodSummary 
  name: request
name: MockRequest
superclass: Object
