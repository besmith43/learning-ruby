--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Returns a join clause based on the specified join type and condition. MySQL's NATURAL join is 'semantically equivalent to a JOIN with a USING clause that names all columns that exist in both tables. The constraint expression may be nil, so join expression can accept two arguments.
- !ruby/struct:SM::Flow::H 
  level: 3
  text: Note
- !ruby/struct:SM::Flow::P 
  body: Full outer joins (:full_outer) are not implemented in MySQL (as of v6.0), nor is there currently a work around implementation in Sequel. Straight joins with 'ON &lt;condition&gt;' are not yet implemented.
- !ruby/struct:SM::Flow::H 
  level: 3
  text: Example
- !ruby/struct:SM::Flow::VERB 
  body: "  @ds = MYSQL_DB[:nodes]\n  @ds.join_expr(:natural_left_outer, :nodes)\n  # 'NATURAL LEFT OUTER JOIN nodes'\n"
full_name: Sequel::MySQL::Dataset#join_expr
is_singleton: false
name: join_expr
params: (type, table, expr = nil)
visibility: public
