--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Returns a copy of the dataset with the given conditions imposed upon it. If the query has been grouped, then the conditions are imposed in the HAVING clause. If not, then they are imposed in the WHERE clause. Filter accepts a Hash (formated into a list of equality expressions), an Array (formatted ala ActiveRecord conditions), a String (taken literally), or a block that is converted into expressions.
- !ruby/struct:SM::Flow::VERB 
  body: "  dataset.filter(:id =&gt; 3).sql #=&gt;\n    &quot;SELECT * FROM items WHERE (id = 3)&quot;\n  dataset.filter('price &lt; ?', 100).sql #=&gt;\n    &quot;SELECT * FROM items WHERE price &lt; 100&quot;\n  dataset.filter('price &lt; 100').sql #=&gt;\n    &quot;SELECT * FROM items WHERE price &lt; 100&quot;\n  dataset.filter {price &lt; 100}.sql #=&gt;\n    &quot;SELECT * FROM items WHERE (price &lt; 100)&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: "Multiple filter calls can be chained for scoping:"
- !ruby/struct:SM::Flow::VERB 
  body: "  software = dataset.filter(:category =&gt; 'software')\n  software.filter {price &lt; 100}.sql #=&gt;\n    &quot;SELECT * FROM items WHERE (category = 'software') AND (price &lt; 100)&quot;\n"
full_name: Sequel::Dataset::SQL#filter
is_singleton: false
name: filter
params: (*cond, &block)
visibility: public
