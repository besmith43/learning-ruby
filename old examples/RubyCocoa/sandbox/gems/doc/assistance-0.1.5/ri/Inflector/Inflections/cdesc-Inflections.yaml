--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  name: plurals
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  name: singulars
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  name: uncountables
  rw: R
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: "A singleton instance of this class is yielded by Inflector.inflections, which can then be used to specify additional inflection rules. Examples:"
- !ruby/struct:SM::Flow::VERB 
  body: "  Inflector.inflections do |inflect|\n    inflect.plural /^(ox)$/i, '\\1\\2en'\n    inflect.singular /^(ox)en/i, '\\1'\n\n    inflect.irregular 'octopus', 'octopi'\n\n    inflect.uncountable &quot;equipment&quot;\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: New rules are added at the top. So in the example above, the irregular rule for octopus will now be the first of the pluralization and singularization rules that is runs. This guarantees that your rules run before any of the rules that may already have been loaded.
constants: []

full_name: Inflector::Inflections
includes: 
- !ruby/object:RI::IncludedModule 
  name: Singleton
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: clear
- !ruby/object:RI::MethodSummary 
  name: irregular
- !ruby/object:RI::MethodSummary 
  name: plural
- !ruby/object:RI::MethodSummary 
  name: singular
- !ruby/object:RI::MethodSummary 
  name: uncountable
name: Inflections
superclass: Object
